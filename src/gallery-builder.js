// gallery-builder.js - Generates markup for the gallery.
// When served via Vite we can use `import.meta.glob` to discover images during
// bundling. However if the HTML file is opened directly (e.g. from the file
// system) this syntax won't work. To support that scenario we fallback to a
// pre-generated JSON manifest located in `public/gallery-manifest.json`.

async function loadImageModules() {
  if (
    typeof import.meta !== 'undefined' &&
    typeof import.meta.glob === 'function'
  ) {
    // Vite/ESBuild environment - discover images dynamically
    return import.meta.glob('/src/assets/gallery/**/*.{jpg,jpeg,png,webp}', {
      eager: true,
      as: 'url',
    });
  }

  // Plain browser environment - load the manifest generated by
  // `generate-gallery-manifest.js`
  const modules = {};
  try {
    const manifestModule = await import('../public/gallery-manifest.json', {
      assert: { type: 'json' },
    });
    const manifest = manifestModule.default;
    for (const category in manifest) {
      manifest[category].forEach((url) => {
        modules[url] = url;
      });
    }
  } catch (err) {
    console.error('Failed to load gallery manifest', err);
  }
  return modules;
}

export async function buildGallery() {
  const imageModules = await loadImageModules();

  const markup = {
    showers: '',
    doors: '',
    partitions: '',
    railings: ''
  };

  // A mapping from the filename prefix to the category key in the `markup` object.
  // This handles cases like 'partition_01.jpg' belonging to the 'partitions' category.
  const prefixToCategory = {
    'showers': 'showers',
    'doors': 'doors',
    'partition': 'partitions',
    'railing': 'railings'
  };

  // The keys of imageModules are paths like '/src/assets/gallery/showers_01.jpg'
  // The values are the processed URLs for the images.
  for (const path in imageModules) {
    const imageUrl = imageModules[path];

    // Extract prefix from the filename, e.g., "showers" from "showers_01.jpg"
    const filename = path.split('/').pop(); // e.g., "showers_01.jpg"
    const prefix = filename.split('_')[0];   // e.g., "showers"

    const category = prefixToCategory[prefix];

    // Check if the extracted category is one we expect
    if (category && markup.hasOwnProperty(category)) {
      markup[category] += `
        <div class="gallery-item glass-card rounded-xl overflow-hidden">
          <img src="${imageUrl}" loading="lazy" alt="${category} installation" onerror="this.parentElement.style.display='none'" />
        </div>
      `;
    }
  }

  return markup;
}
